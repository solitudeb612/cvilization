package ${package}.${moduleName}.controller;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import cn.swust.indigo.common.core.util.R;
import cn.swust.indigo.common.log.annotation.Log;
import cn.swust.indigo.common.data.mybatis.util.CreateQuery;
import ${package}.${moduleName}.entity.po.${className};
import ${package}.${moduleName}.service.${className}Service;
import ${package}.${moduleName}.entity.vo.Q${className};
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.AllArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;


/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@AllArgsConstructor
@RequestMapping("/${pathName}" )
@Api(value = "${pathName}", tags = "${comments}管理")
public class ${className}Controller {

    private final  ${className}Service ${classname}Service;

    /**
     * 分页查询
     * @param page 分页对象
     * @param ${classname} ${comments}
     * @return
     */
    @ApiOperation(value = "分页查询", notes = "分页查询")
    @GetMapping("/page" )
    public R get${className}Page(Page<${className}> page, Q${className} ${classname}) {
        return R.ok(${classname}Service.page(page, CreateQuery.getQueryWrapper(${classname})));
    }

    /**
     * 通过id查询${comments}
     * @param ${pk.lowerAttrName} id
     * @return R
     */
    @ApiOperation(value = "通过id查询", notes = "通过id查询")
    @GetMapping("/get" )
    public R getById(@RequestParam("${pk.lowerAttrName}" ) ${pk.attrType} ${pk.lowerAttrName}) {
        return R.ok(${classname}Service.getById(${pk.lowerAttrName}));
    }

    /**
     * 新增${comments}
     * @param ${classname} ${comments}
     * @return R
     */
    @ApiOperation(value = "新增${comments}", notes = "新增${comments}")
    @Log("新增${comments}" )
    @PostMapping
    @PreAuthorize("hasAuthority('${pathName}_add')" )
    public R save(@RequestBody ${className} ${classname}) {
        return R.ok(${classname}Service.save(${classname}));
    }

    /**
     * 修改${comments}
     * @param ${classname} ${comments}
     * @return R
     */
    @ApiOperation(value = "修改${comments}", notes = "修改${comments}")
    @Log("修改${comments}" )
    @PutMapping
##    @PreAuthorize("@pms.hasPermission('${moduleName}_${pathName}_edit')" )
    @PreAuthorize("hasAuthority('${pathName}_edit')" )
    public R updateById(@RequestBody ${className} ${classname}) {
        return R.ok(${classname}Service.updateById(${classname}));
    }


    /**
     * 通过id删除${comments}
     * @param ${pk.lowerAttrName}
     * @return R
     */
    @ApiOperation(value = "通过id删除${comments}", notes = "通过id删除${comments}")
    @Log("通过id删除${comments}" )
    @DeleteMapping("/{${pk.lowerAttrName}}" )
##    @PreAuthorize("@pms.hasPermission('${moduleName}_${pathName}_del')" )
    @PreAuthorize("hasAuthority('${pathName}_del')" )
    public R removeById(@PathVariable ${pk.attrType} ${pk.lowerAttrName}) {
        return R.ok(${classname}Service.removeById(${pk.lowerAttrName}));
    }

}
