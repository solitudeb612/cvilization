package ${package}.${moduleName}.controller;

import AdminControllerTestApplication;
import MockAdminUser;
import com.alibaba.fastjson.JSON;
import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.vo.Q${className};
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.web.context.WebApplicationContext;

import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;

/**
 * 测试${className}Controller
 */
@RunWith(SpringRunner.class)
@SpringBootTest
public class ${className}ControllerTest {
    @Autowired
    private WebApplicationContext webApplicationContext;
    private MockMvc mockMvc;

    @Before
    public void setUp() {
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    /**
     * 分页查询
     */
    @Test
	@WithMockUser
    public void page() {
		MvcResult mvcResult;
    	try {
			mvcResult = mockMvc.perform(MockMvcRequestBuilders.get("/${pathName}/page" )
				.content(requestJson)
				.accept(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.status().isOk())             //等同于Assert.assertEquals(200,status);
				// .andExpect(MockMvcResultMatchers.content().string("hello lvgang"))    //等同于 Assert.assertEquals("hello lvgang",content);
				.andDo(MockMvcResultHandlers.print())
				.andReturn();

			int status = mvcResult.getResponse().getStatus();                 //得到返回代码
		    String content = mvcResult.getResponse().getContentAsString();    //得到返回结果
		    System.out.println(content);
			Assert.assertEquals(200, status);                        //断言，判断返回代码是否正确
##		Assert.assertEquals("hello lvgang", content);            //断言，判断返回的值是否正确
	} catch (Exception e) {
		e.printStackTrace();
	}
        fail("请实现${className}ControllerTest 分页查询" );
    }

    /**
     * 通过id查询
     */
    @Test
	@WithMockUser
    public void getById() {
    	MvcResult mvcResult;
		try {
			mvcResult = mockMvc.perform(MockMvcRequestBuilders.get("/${pathName}/get" )
				    .content(requestJson)
					.accept(MediaType.APPLICATION_JSON))
					.andExpect(MockMvcResultMatchers.status().isOk())             //等同于Assert.assertEquals(200,status);
					// .andExpect(MockMvcResultMatchers.content().string("hello lvgang"))    //等同于 Assert.assertEquals("hello lvgang",content);
					.andDo(MockMvcResultHandlers.print())
					.andReturn();

		int status = mvcResult.getResponse().getStatus();                 //得到返回代码
		String content = mvcResult.getResponse().getContentAsString();    //得到返回结果
		System.out.println(content);
		Assert.assertEquals(200, status);                        //断言，判断返回代码是否正确
##			Assert.assertEquals("hello lvgang", content);            //断言，判断返回的值是否正确
		} catch (Exception e) {
			e.printStackTrace();
		}
        fail("请实现${className}ControllerTest Id查询" );
    }

    /**
     * 新增
     */
    @Test
	@WithMockUser
    public void save() {
		${className} ${classname} = new ${className}();
        ${classname}.se
		String requestJson = JSON.toJSONString(${classname});
		MvcResult mvcResult;
		try {
			mvcResult = mockMvc.perform(MockMvcRequestBuilders.post("/${pathName}" )
				.content(requestJson)
					.header("Authorization", "Bearer " + token)
					.accept(MediaType.APPLICATION_JSON))
					 .andExpect(MockMvcResultMatchers.status().isOk())             //等同于Assert.assertEquals(200,status);
					// .andExpect(MockMvcResultMatchers.content().string("hello lvgang"))    //等同于 Assert.assertEquals("hello lvgang",content);
				    .andDo(MockMvcResultHandlers.print())
					.andReturn();

			int status = mvcResult.getResponse().getStatus();                 //得到返回代码
			String content = mvcResult.getResponse().getContentAsString();    //得到返回结果
			System.out.println(content);

			Assert.assertEquals(200, status);                        //断言，判断返回代码是否正确
##			Assert.assertEquals("hello lvgang", content);            //断言，判断返回的值是否正确
		} catch (Exception e) {
			e.printStackTrace();
		}
        fail("请实现${className}ControllerTest 新增" );
    }

    /**
     * 修改
     */
    @Test
	@WithMockUser
    public void editById() {
		${className} ${classname} = new ${className}();
        ${classname}.set.
		String requestJson = JSON.toJSONString(${classname});
		MvcResult mvcResult;
		try {
			mvcResult = mockMvc.perform(MockMvcRequestBuilders.put("/${pathName}" )
					.content(requestJson)
					.header("Authorization", "Bearer " + token)
                    .header("Authorization", "Bearer " + token)
                    .accept(MediaType.APPLICATION_JSON))
                    .andExpect(MockMvcResultMatchers.status().isOk())             //等同于Assert.assertEquals(200,status);
                    // .andExpect(MockMvcResultMatchers.content().string("hello lvgang"))    //等同于 Assert.assertEquals("hello lvgang",content);
                    .andDo(MockMvcResultHandlers.print())
                    .andReturn();

            int status = mvcResult.getResponse().getStatus();                 //得到返回代码
            String content = mvcResult.getResponse().getContentAsString();    //得到返回结果
            System.out.println(content);

            Assert.assertEquals(200, status);                        //断言，判断返回代码是否正确
            ##			Assert.assertEquals("hello lvgang", content);            //断言，判断返回的值是否正确
        } catch (Exception e) {
            e.printStackTrace();
        }
        fail("请实现${className}ControllerTest 修改" );
    }

    /**
     * 删除
     */
    @Test
	@WithMockUser
    public void delById() {
		MvcResult mvcResult;
		try {
			mvcResult = mockMvc.perform(MockMvcRequestBuilders.delete("/${pathName}/del" )
					.content(requestJson)
					.header("Authorization", "Bearer " + token)
                    .accept(MediaType.APPLICATION_JSON))
                    .andExpect(MockMvcResultMatchers.status().isOk())             //等同于Assert.assertEquals(200,status);
                      // .andExpect(MockMvcResultMatchers.content().string("hello lvgang"))    //等同于 Assert.assertEquals("hello lvgang",content);
				    .andDo(MockMvcResultHandlers.print())
                   .andReturn();

        int status = mvcResult.getResponse().getStatus();                 //得到返回代码
        String content = mvcResult.getResponse().getContentAsString();    //得到返回结果
        System.out.println(content);

        Assert.assertEquals(200, status);                        //断言，判断返回代码是否正确
        ##			Assert.assertEquals("hello lvgang", content);            //断言，判断返回的值是否正确
    } catch (Exception e) {
        e.printStackTrace();
    }
        fail("请实现${className}ControllerTest 删除" );
    }

}